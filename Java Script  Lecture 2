                                                         What is a scope in js ? 
The scope is the current context of execution in which values and expressions
are "visible" or can be referenced. If a variable or expression is not in the current
scope, it will not be available for use. Scopes can also be layered in a hierarchy, 
so that child scopes have access to parent scopes, but not vice versa.
• Global scope: The default scope for all code running in script mode.
• Function scope: The scope created with a function.
•

JavaScript has the following kinds of scopes:
Block scope: This scope restricts the variable that is declared 
inside a specific block, from access by the outside of the block.
Module scope: The scope for code running in module mode.
                                                           Hoisting – Variable (var) 
There’s a temptation to think that all of the code you see in a 
JavaScript
program is interpreted line-by-line, top-down in order, as the program
execute. While that is essentially true, there’s one part of that as‐
assumption that can lead to incorrect thinking about your program
                                                           Hoisting – function declaration
So, one way of thinking, sort of metaphorically, about this process, is that variable and 
function
declarations are “moved” from where they appear in the flow of the code to the top of the 
code. This gives rise to the name hoisting.
The function foo’s declaration (which in this case includes the implied value of it as an 
actual function) is hoisted, such that the call on the first line is able to execute
                                                           Temporal dead zone, let and cons
MIYOTVI ZONA KRCHI

                                                            recursion
Recursion is when a function calls itself until someone stops it. If no one stops it then it'll 
recurse (call itself) forever. Recursive functions let you perform a unit of work multiple times.
Modern programming languages like JavaScript already have the for and while statements as
alternatives to recursive functions. But some languages like Closure do not have any looping
statements, so you need to use recursion to repeatedly execute a piece of code.

                                                            recursion
A recursive function must have a condition to stop calling itself. Otherwise, the 
function is called indefinitely.
Once the condition is met, the function stops calling itself. This is called the base 
condition.
To prevent infinite recursion, you can use if...else statement (or similar approach) 
where one branch makes the recursive call, and the other doesn't
